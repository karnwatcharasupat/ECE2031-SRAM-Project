LOAD 	sram_addr_low
OUT	SRAM_WA01 ; this should trigger write cycle and SRAM stay in ready-to-read state until data comes in
LOAD	my_data	  ; MEM(data) goes into AC
OUT	SRAM_WD01 ; this actuall passes data into the SRAM
ADDI    1

-------------------------
50 MHz 			50 MHz <=> 20 ns		-- frequecy <=> period
SCOMP			SRAM				IO_DECODER

fetch(LOAD addr)	idle				-- inputs for IO_WRITE 
decode(LOAD addr)	idle				--
execute(LOAD addr )	idle				--
		
  
	{
  		state <= warm_up			-- when the is warm_up.
	}
ex_out(OUT WA)		warm_up 			-- execute warm_up.
			{
			  state <= write_addr_prep	-- when the state is write_addr_prep
			  (internally)
	  		  ADDR <= latched 		-- lanch on the header
			  WE <= latched as '1'		-- write when latch is '1'
			  OE <= ???			-- the decoder is ???
			}
ex_out2(OUT WA)		write_addr_prep 		-- when is ex_out2 in out wa the state is write_addr_prep.
			{	CTRL_OE <= '0'		-- when CTRL_OE is '0'.
			  SRAM_ADHI <= ADDR[hi]		-- the high address go to SRAM_ADHI.
			  SRAM_ADLO <= ADDR[lo]		-- the low address got to SRAM_ADLO.
			}

fetch(LOAD data)	write_we_assert 		-- when fetch load data to write_we_assert 
			{
			  SRAM_WE_N <= NOT(WE)		-- SRAM_WE_N is no writting.
			  
			  state <= write_wait		-- the is change to write_wait.
			}

decode(LOAD data)	write_wait 			-- when the decode load data from write_wait.
			{
			  -- DATA <= IO_DATA		-- data get change to IO_DATA.	
			  TR_ENABLE <= '1'		-- the TR_ENABLE become '1'.
		          SRAM_DQ <= DATA		-- SRAM_DQ get DATA.

			  if (CTRL_OE) -- this comes from IO_DECODER		
				state <= write_lock	-- the state is write_lock.
			  else				-- If not
				state <= write_wait	-- the state is write_wait.
			}

execute(LOAD data)	write_wait			-- when data is load the state is write_wait.

fetch(OUT WD)		write_wait			-- when OUT WD.

decode(OUT WD)						
	{
  		IO_WRITE <= '1'				-- when the state is OUT WD the IO_write gets '1'.
	}			write_wait // IO_DATA flows into SRAM_DQ

----- make sure no more random data flows in after this -----

ex_out(OUT WD) 
{					
  IO_CYCLE <= '1'					-- when the state is OUT WD the IO_CYCLE gets '1'.  
}		write_wait				-- when is write_wait  
	if (IO_ADDR is in WD_list and IO_CYCLE == '1')  -- 
		{
			  CTRL_OE <= '1'		-- CTRL_OE gets '1'.	
		}

ex_out2(OUT WD)	 					-- when the command ex_out2 gets OUT WD.
{
  IO_CYCLE <= '0'					-- IO_CYCLE gets '0'.
}			write_lock 
			{
			  WE <= '0'			-- WE gets '0'.
			  SRAM_WE_N <= NOT(WE)		-- SRAM_WE_N gets not WE.
			}

fetch (ADDI)					

--------------------------------------

0x10 = 0b0001 0000 R00
0x11 = 0b0001 0001 R01
0x12 = 0b0001 0010 R10
0x13 = 0b0001 0011 R11

0x14 = 0b0001 0100 WA00
0x15 = 0b0001 0101 WA01
0x16 = 0b0001 0110 WA10
0x17 = 0b0001 0111 WA11

0x18 = 0b0010 0100 WD00
0x19 = 0b0010 0101 WD01
0x1A = 0b0010 0110 WD10
0x1B = 0b0010 0111 WD11

0x1C
0x1D
0x1E
0x1F










-------------------------

LOAD 	sram_addr_low
OUT 	SRAM_R01;	this trigger IO_WRITE
IN	SRAM_R01;	this doesn't trigger IO_WRITE
